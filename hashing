#include <iostream>
using namespace std;

const int TABLE_SIZE = 7;

class HashEntry
{
private:
	int key;
	int value;

public:
	HashEntry(int _key, int _value) :
		key(_key),
		value(_value)
	{
	}
	
	~HashEntry()
	{
	}

public:


	

	void print() const
	{
		cout << "\nKey: " << key << " value: " << value;
	}

	int getKey() const
	{
		return key;
	}

	int getValue() const
	{
		return value;
	}

};

class HashMap
{
private:
	HashEntry **table;
	int current_size;
	int size;

public:
	HashMap() :
		
		current_size(0)
	{
		table = new HashEntry*[TABLE_SIZE];
		for (int i = 0; i < TABLE_SIZE; i++)
			table[i] = NULL;
	}

	

	~HashMap()
	{
		for (int i = 0; i < size; i++)
			if (table[i] != NULL)
				delete table[i];
		delete[] table;
	}

public:


	bool isFull()
	{
		return current_size * 2 >= size;
	}

	void insert(int keyvalue)
	{
		if (isFull())
		{
			rehash();
		}

		int hash = (keyvalue % size);
		while (table[hash] != NULL && table[hash]->getKey() != keyvalue)
			hash = (hash + 1) % size;

		if (table[hash] == NULL)
		{
			table[hash] = new HashEntry(keyvalue, keyvalue);
			cout << "\nInsert value: " << keyvalue;
		}
		else
			return;

		current_size++;
	}

	int get(int key)
	{
		int hash = (key % size);
		while (table[hash] != NULL && table[hash]->getKey() != key)
			hash = (hash + 1) % size;

		if (table[hash] == NULL)
			return 0;
		else
			return table[hash]->getValue();
	}


	void find(int value)
	{
	
		
			int val = get(value);
			
			if (val == value)
			 cout << "\nFound value: " << value <<endl;
			else
			 cout <<"\ncant find"<<value<<endl;
		
		

		
	}

	void display()
	{
		for (int i = 0; i < 12; i++)
			if (table[i] != NULL)
				table[i]->print();
	}

private:

	void init(const int & _size)
	{
		size = _size;
		current_size = 0;

		table = new HashEntry*[size];
		for (int i = 0; i < size; i++)
			table[i] = NULL;
	}

	void rehash()
	{
		cout << "\nRehash";

		HashEntry ** temp = table;
		int temp_size = size;
	    init(nextPrime(size * 2));
		for (int i = 0; i < temp_size; ++i)
		{
			if (temp[i] != NULL)
			{
				insert(temp[i]->getValue());
			}
		}
		delete temp;
	}
	
	bool isPrime(int n)
{
	if (n == 2 || n == 3)
		return true;

	if (n == 1 || n % 2 == 0)
		return false;

	for (int i = 3; i * i <= n; i += 2)
		if (n % i == 0)
			return false;

	return true;
}

int nextPrime(int n)
{
	if (n <= 0)
		n = 3;

	if (n % 2 == 0)
		n++;

	for (; !isPrime(n); n += 2)
		;

	return n;
}


	
};

int main()
{
	HashMap * hash_map = new HashMap();
	
	
	hash_map->insert(121); //add in table[1]
	hash_map->insert(81); //add in table[2]
	hash_map->insert(16); //add in table[0]
	hash_map->insert(100);//table is full now then add in next table[1]
	hash_map->insert(25); //table is full now then add in next table[2]
	hash_map->insert(0); //table is full now then add in next table[0]
	hash_map->insert(1);
	hash_map->insert(9);
	hash_map->insert(4);
	hash_map->insert(36);
	hash_map->insert(64);
	hash_map->insert(49);
	
	hash_map->display();
	
	hash_map->find(134);

	//rehash
	delete hash_map;
	return 0;
}
